public class BSTSet{
	public class TNode{
		int element;
		TNode left;
		TNode right;
		TNode(int i, TNode l, TNode r){
			element = i;
			left = l;
			right = r;
		}
	}
	
	private TNode root;						//BST root node
	public BSTSet() {
		root = null;					//Initialize empty set
	}
	
	//additional function to remove unwanted integers in the initial array:
	public int[] Sort(int[] input) {
		for(int current = 1; current<input.length; current++) {			//sort starting from the second value of the array because the 1 index is the root 
			int temp = input[current];
			int previous = current-1;
			
			while(input[previous] > input[current]) {					//while the previous input is greater then the input current in the list
				input[previous + 1] = input[previous];					//the next previous input is being shift to the next index
				previous=previous-1;
			}
		}
		return 1;
	}
	
	//additional function to navigate through the Tree:
	public TNode navigator() {
		return root;
	}
	
	public BSTSet(int[] input) {
		
		for (int i=0; i<input.length; i++) {
			if(root == null) {
				root.element = input[i];
			}
			else if (input[i] < root.element) {
				root.left = root;
				root.element = input[i];
			}
			else(input[i] > root.element)
				root.right = root
		}
		
	}
	
	//1)
	public boolean isIn(int v) {
		return true;
	}
	
	
}
